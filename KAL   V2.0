import tkinter as tk
from tkinter import simpledialog, messagebox, colorchooser

class CalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("69 KALCULATOR 69")
        self.root.geometry("600x500")  # Wider window
        self.root.config(bg="#2C2F33")
        
        # Display area for the calculator
        self.display = tk.Text(root, height=7, width=85, font=("Courier", 24), bg="#23272A", fg="#FFFFFF")
        self.display.pack(pady=10)
        
        # Create a frame for the operation buttons
        operation_frame = tk.Frame(root, bg="#2C2F33")
        operation_frame.pack(pady=10)
        
        # Operation buttons layout
        operation_buttons = [
            ('ADD', self.add), ('SUBTRACT', self.sub),
            ('MULTIPLY', self.multi), ('DIVIDE', self.div)
        ]
        
        # Create operation buttons in a grid
        for idx, (text, command) in enumerate(operation_buttons):
            btn = tk.Button(operation_frame, text=text, font=("Courier", 14), command=command, height=3, width=12, bg="#7289DA", fg="White")
            btn.grid(row=idx // 2, column=idx % 2, padx=3, pady=2)
        
        # Create a frame for the customization buttons
        customization_frame = tk.Frame(root, bg="#2C2F33")
        customization_frame.pack(side=tk.BOTTOM, anchor='w', padx=2, pady=2)
        
        # Customization buttons
        bg_button = tk.Button(customization_frame, text="BG Color", font=("Sans", 6), command=self.change_bg_color, height=1, width=10, bg="#99AAB5", fg="Black")
        bg_button.pack(side=tk.LEFT, padx=5)

        fg_button = tk.Button(customization_frame, text="Text Color", font=("Sans", 6), command=self.change_text_color, height=1, width=10, bg="#99AAB5", fg="Black")
        fg_button.pack(side=tk.LEFT, padx=5)

        # Reset button positioned next to customization buttons
        reset_button = tk.Button(customization_frame, text="Reset", font=("Sans", 6), command=self.reset, height=1, width=10, bg="#99AAB5", fg="Black")
        reset_button.pack(side=tk.LEFT, padx=5)
        
        # Customization Variables
        self.current_bg_color = "#2C2F33"
        self.current_fg_color = "#FFFFFF"

    def update_display(self, text):
        self.display.insert(tk.END, text + "\n")

    def reset(self):
        self.display.delete(1.0, tk.END)

    def change_bg_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.current_bg_color = color
            self.display.config(bg=color)
    
    def change_text_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.current_fg_color = color
            self.display.config(fg=color)

    def add(self):
        self.update_display("you selected ADDITION +")
        num1, num2 = self.get_input_numbers()
        if num1 is not None and num2 is not None:
            result = num1 + num2
            self.show_result(num1, num2, result, '+')
    
    def sub(self):
        self.update_display("you selected SUBTRACTION -")
        num1, num2 = self.get_input_numbers()
        if num1 is not None and num2 is not None:
            result = num1 - num2
            self.show_result(num1, num2, result, '-')
    
    def multi(self):
        self.update_display("you selected MULTIPLICATION x")
        num1, num2 = self.get_input_numbers()
        if num1 is not None and num2 is not None:
            result = num1 * num2
            self.show_result(num1, num2, result, 'x')
    
    def div(self):
        self.update_display("you selected DIVISION /")
        num1, num2 = self.get_input_numbers()
        if num1 is not None and num2 is not None:
            if num2 == 0:
                messagebox.showerror("Error", "Cannot divide by zero")
                return
            result = num1 / num2
            self.show_result(num1, num2, result, '/')
    
    def get_input_numbers(self):
        try:
            num1 = int(self.prompt_user("Enter the 1st number"))
            num2 = int(self.prompt_user("Enter the 2nd number"))
            return num1, num2
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numbers")
            return None, None
    
    def prompt_user(self, message):
        return simpledialog.askstring("Input", message)
    
    def show_result(self, num1, num2, result, operator):
        self.update_display(f"Result: {num1} {operator} {num2} = {result}")
        comparison_69 = result - 69
        if result > 69:
            self.update_display(f"which is {comparison_69} more than 69")
        else:
            self.update_display(f"which is {-comparison_69} less than 69")
        self.update_display(f"also, it is {result} more than the chances of you getting some bitches. üçÜ")

if __name__ == "__main__":
    root = tk.Tk()
    app = CalculatorApp(root)
    root.mainloop()
